// Generated by view binder compiler. Do not edit!
package com.android.msd.capstone.project.gardennerds.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.msd.capstone.project.gardennerds.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final Button btnApiSearch;

  @NonNull
  public final Button btnMeasurement;

  @NonNull
  public final Button btnSoilSensor;

  @NonNull
  public final Button btnSubscribe;

  @NonNull
  public final RecyclerView homeRv;

  @NonNull
  public final TextInputEditText searchEdt;

  @NonNull
  public final TextInputLayout searchTxtLayout;

  private FragmentHomeBinding(@NonNull FrameLayout rootView, @NonNull Button btnApiSearch,
      @NonNull Button btnMeasurement, @NonNull Button btnSoilSensor, @NonNull Button btnSubscribe,
      @NonNull RecyclerView homeRv, @NonNull TextInputEditText searchEdt,
      @NonNull TextInputLayout searchTxtLayout) {
    this.rootView = rootView;
    this.btnApiSearch = btnApiSearch;
    this.btnMeasurement = btnMeasurement;
    this.btnSoilSensor = btnSoilSensor;
    this.btnSubscribe = btnSubscribe;
    this.homeRv = homeRv;
    this.searchEdt = searchEdt;
    this.searchTxtLayout = searchTxtLayout;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnApiSearch;
      Button btnApiSearch = ViewBindings.findChildViewById(rootView, id);
      if (btnApiSearch == null) {
        break missingId;
      }

      id = R.id.btnMeasurement;
      Button btnMeasurement = ViewBindings.findChildViewById(rootView, id);
      if (btnMeasurement == null) {
        break missingId;
      }

      id = R.id.btnSoilSensor;
      Button btnSoilSensor = ViewBindings.findChildViewById(rootView, id);
      if (btnSoilSensor == null) {
        break missingId;
      }

      id = R.id.btn_subscribe;
      Button btnSubscribe = ViewBindings.findChildViewById(rootView, id);
      if (btnSubscribe == null) {
        break missingId;
      }

      id = R.id.home_rv;
      RecyclerView homeRv = ViewBindings.findChildViewById(rootView, id);
      if (homeRv == null) {
        break missingId;
      }

      id = R.id.search_edt;
      TextInputEditText searchEdt = ViewBindings.findChildViewById(rootView, id);
      if (searchEdt == null) {
        break missingId;
      }

      id = R.id.search_txt_layout;
      TextInputLayout searchTxtLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchTxtLayout == null) {
        break missingId;
      }

      return new FragmentHomeBinding((FrameLayout) rootView, btnApiSearch, btnMeasurement,
          btnSoilSensor, btnSubscribe, homeRv, searchEdt, searchTxtLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
