// Generated by view binder compiler. Do not edit!
package com.android.msd.capstone.project.gardennerds.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.msd.capstone.project.gardennerds.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateAddressDialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText updateAddress1;

  @NonNull
  public final EditText updateAddress2;

  @NonNull
  public final TextInputLayout updateAddressOneWrapper;

  @NonNull
  public final TextInputLayout updateAddressTwoWrapper;

  @NonNull
  public final Button updateBtn;

  @NonNull
  public final EditText updateCity;

  @NonNull
  public final TextInputLayout updateCityWrapper;

  @NonNull
  public final EditText updatePostalCode;

  @NonNull
  public final TextInputLayout updatePostalCodeWrapper;

  @NonNull
  public final Spinner updateProvinceSpinner;

  @NonNull
  public final TextInputLayout updateProvinceSpinnerWrapper;

  private UpdateAddressDialogBinding(@NonNull LinearLayout rootView,
      @NonNull EditText updateAddress1, @NonNull EditText updateAddress2,
      @NonNull TextInputLayout updateAddressOneWrapper,
      @NonNull TextInputLayout updateAddressTwoWrapper, @NonNull Button updateBtn,
      @NonNull EditText updateCity, @NonNull TextInputLayout updateCityWrapper,
      @NonNull EditText updatePostalCode, @NonNull TextInputLayout updatePostalCodeWrapper,
      @NonNull Spinner updateProvinceSpinner,
      @NonNull TextInputLayout updateProvinceSpinnerWrapper) {
    this.rootView = rootView;
    this.updateAddress1 = updateAddress1;
    this.updateAddress2 = updateAddress2;
    this.updateAddressOneWrapper = updateAddressOneWrapper;
    this.updateAddressTwoWrapper = updateAddressTwoWrapper;
    this.updateBtn = updateBtn;
    this.updateCity = updateCity;
    this.updateCityWrapper = updateCityWrapper;
    this.updatePostalCode = updatePostalCode;
    this.updatePostalCodeWrapper = updatePostalCodeWrapper;
    this.updateProvinceSpinner = updateProvinceSpinner;
    this.updateProvinceSpinnerWrapper = updateProvinceSpinnerWrapper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateAddressDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateAddressDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_address_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateAddressDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.updateAddress1;
      EditText updateAddress1 = ViewBindings.findChildViewById(rootView, id);
      if (updateAddress1 == null) {
        break missingId;
      }

      id = R.id.updateAddress2;
      EditText updateAddress2 = ViewBindings.findChildViewById(rootView, id);
      if (updateAddress2 == null) {
        break missingId;
      }

      id = R.id.updateAddressOneWrapper;
      TextInputLayout updateAddressOneWrapper = ViewBindings.findChildViewById(rootView, id);
      if (updateAddressOneWrapper == null) {
        break missingId;
      }

      id = R.id.updateAddressTwoWrapper;
      TextInputLayout updateAddressTwoWrapper = ViewBindings.findChildViewById(rootView, id);
      if (updateAddressTwoWrapper == null) {
        break missingId;
      }

      id = R.id.updateBtn;
      Button updateBtn = ViewBindings.findChildViewById(rootView, id);
      if (updateBtn == null) {
        break missingId;
      }

      id = R.id.updateCity;
      EditText updateCity = ViewBindings.findChildViewById(rootView, id);
      if (updateCity == null) {
        break missingId;
      }

      id = R.id.updateCityWrapper;
      TextInputLayout updateCityWrapper = ViewBindings.findChildViewById(rootView, id);
      if (updateCityWrapper == null) {
        break missingId;
      }

      id = R.id.updatePostalCode;
      EditText updatePostalCode = ViewBindings.findChildViewById(rootView, id);
      if (updatePostalCode == null) {
        break missingId;
      }

      id = R.id.updatePostalCodeWrapper;
      TextInputLayout updatePostalCodeWrapper = ViewBindings.findChildViewById(rootView, id);
      if (updatePostalCodeWrapper == null) {
        break missingId;
      }

      id = R.id.updateProvinceSpinner;
      Spinner updateProvinceSpinner = ViewBindings.findChildViewById(rootView, id);
      if (updateProvinceSpinner == null) {
        break missingId;
      }

      id = R.id.updateProvinceSpinnerWrapper;
      TextInputLayout updateProvinceSpinnerWrapper = ViewBindings.findChildViewById(rootView, id);
      if (updateProvinceSpinnerWrapper == null) {
        break missingId;
      }

      return new UpdateAddressDialogBinding((LinearLayout) rootView, updateAddress1, updateAddress2,
          updateAddressOneWrapper, updateAddressTwoWrapper, updateBtn, updateCity,
          updateCityWrapper, updatePostalCode, updatePostalCodeWrapper, updateProvinceSpinner,
          updateProvinceSpinnerWrapper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
